<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Premium Crypto Dashboard — BTC/ETH • BTC Dominance • TOTAL3ES/ETH</title>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

<style>
  :root{
    --bg:#071018; --card:#0b1220; --muted:#9fb3c9; --text:#e6eef6; --accent:#4fc3f7;
    --good:#2ecc71; --bad:#ff6b6b;
  }
  [data-theme="light"]{ --bg:#f5f8fb; --card:#ffffff; --muted:#53687a; --text:#071018; --accent:#0077cc; --good:#1f8a3a; --bad:#c8232c; }
  *{box-sizing:border-box}
  body{margin:0;font-family:Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;background:var(--bg);color:var(--text);-webkit-font-smoothing:antialiased;min-height:100vh;}
  .wrap{max-width:1200px;margin:18px auto;padding:18px;display:grid;grid-template-columns:1fr;gap:14px;}
  header{display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;flex-direction:column}
  .title{font-weight:700;font-size:18px;letter-spacing:0.2px}
  .sub{color:var(--muted);font-size:13px;margin-top:3px}
  .controls{display:flex;gap:10px;align-items:center}
  .btn{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:10px;color:var(--text);cursor:pointer;font-weight:600}
  .pill{background:rgba(255,255,255,0.02);padding:6px 9px;border-radius:999px;font-size:13px;border:1px solid rgba(255,255,255,0.03);color:var(--muted)}
  .grid{display:grid;grid-template-columns:repeat(2,1fr);gap:14px}
  @media(max-width:880px){ .grid{grid-template-columns:1fr} }
  .card{background:var(--card);border-radius:14px;padding:14px;border:1px solid rgba(255,255,255,0.03);box-shadow:0 10px 30px rgba(2,6,11,0.45)}
  .row{display:flex;align-items:center;justify-content:space-between;gap:12px}
  .metric{display:flex;flex-direction:column}
  .metric .label{font-size:13px;color:var(--muted)}
  .metric .value{font-size:22px;font-weight:700;margin-top:6px}
  .muted{color:var(--muted);font-size:12px}
  .chart-wrap{height:220px;margin-top:10px}
  .full{grid-column:1 / -1}
  footer{margin-top:6px;color:var(--muted);font-size:12px;text-align:center}
  .small{font-size:11px;color:var(--muted)}
  .status-dot{width:10px;height:10px;border-radius:50%;display:inline-block;margin-right:8px;background:#666}
  .ok{background:var(--good)} .err{background:var(--bad)}
  /* toggle styling */
  .toggle{display:inline-flex;align-items:center;gap:8px}
  input[type=range]{accent-color:var(--accent)}
</style>
</head>
<body data-theme="dark">
<div class="wrap">
  <header>
    <div class="brand">
      <div class="title">Premium Crypto Dashboard</div>
      <div class="sub">BTC/ETH • BTC Dominance • TOTAL3ES/ETH — live · no keys</div>
    </div>
    <div class="controls">
      <div class="pill" id="lastUpdate">last update: —</div>
      <div class="toggle">
        <button class="btn" id="themeBtn">Toggle theme</button>
        <button class="btn" id="resetBtn" title="Clear charts">Reset</button>
      </div>
    </div>
  </header>

  <main class="grid">
    <!-- BTC/ETH -->
    <section class="card">
      <div class="row">
        <div class="metric">
          <div class="label">BTC / ETH (live)</div>
          <div class="value" id="btcEthVal">—</div>
        </div>
        <div style="text-align:right">
          <div class="muted" id="btcEthChange">24h: —</div>
          <div class="muted small" id="wsStatus">WS: connecting…</div>
        </div>
      </div>
      <div class="chart-wrap"><canvas id="chartBtcEth"></canvas></div>
    </section>

    <!-- BTC Dominance -->
    <section class="card">
      <div class="row">
        <div class="metric">
          <div class="label">BTC Dominance (%)</div>
          <div class="value" id="btcDomVal">—</div>
        </div>
        <div style="text-align:right">
          <div class="muted small" id="cgStatus">CoinGecko: —</div>
        </div>
      </div>
      <div class="chart-wrap"><canvas id="chartBtcDom"></canvas></div>
    </section>

    <!-- TOTAL3ES/ETH (full width) -->
    <section class="card full">
      <div class="row">
        <div class="metric">
          <div class="label">TOTAL3ES / ETH (pure altcoins excl. BTC, ETH, stables)</div>
          <div class="value" id="total3Val">—</div>
        </div>
        <div style="text-align:right">
          <div class="muted small" id="t3Status">computed: —</div>
        </div>
      </div>
      <div class="chart-wrap"><canvas id="chartTotal3"></canvas></div>
    </section>
  </main>

  <footer>
    <div class="small">Data: Binance WebSocket + CoinGecko. No API key needed. Save this file and host it (GitHub Pages recommended).</div>
  </footer>
</div>

<script>
/* ============= CONFIG ============= */
const COINGECKO_BASE = 'https://api.coingecko.com/api/v3';
const STABLECOIN_IDS = [
  'tether','usd-coin','binance-usd','dai','true-usd','paxos-standard','fei-usd','gusd','usdx','husd'
]; // common stablecoin ids on CoinGecko
const MAX_POINTS = 120; // points to keep on chart
const POLL_MS_DEFAULT = 15000; // coinGecko poll interval

/* ============= UI refs ============= */
const btcEthValEl = document.getElementById('btcEthVal');
const btcEthChangeEl = document.getElementById('btcEthChange');
const wsStatusEl = document.getElementById('wsStatus');
const btcDomValEl = document.getElementById('btcDomVal');
const cgStatusEl = document.getElementById('cgStatus');
const total3ValEl = document.getElementById('total3Val');
const t3StatusEl = document.getElementById('t3Status');
const lastUpdateEl = document.getElementById('lastUpdate');
const themeBtn = document.getElementById('themeBtn');
const resetBtn = document.getElementById('resetBtn');

/* ============= Chart.js setup ============= */
function createLineChart(ctx, label, ySuffix='') {
  return new Chart(ctx, {
    type: 'line',
    data: { labels: [], datasets: [{ label, data: [], tension:0.25, borderWidth:2, pointRadius:0, borderColor: getComputedStyle(document.documentElement).getPropertyValue('--accent') || '#4fc3f7', fill:true, backgroundColor: 'rgba(79,195,247,0.06)' }] },
    options: {
      responsive:true,
      maintainAspectRatio:false,
      scales: {
        x: { display:false },
        y: {
          ticks: { color: getComputedStyle(document.documentElement).getPropertyValue('--muted') || '#9fb3c9' },
        }
      },
      plugins: {
        legend: { display:false },
        tooltip: {
          callbacks: {
            label: ctx => {
              const v = ctx.formattedValue;
              return `${ctx.dataset.label}: ${v}${ySuffix}`;
            }
          }
        }
      }
    }
  });
}

const chartBtcEth = createLineChart(document.getElementById('chartBtcEth').getContext('2d'), 'BTC/ETH');
const chartBtcDom = createLineChart(document.getElementById('chartBtcDom').getContext('2d'), 'BTC Dominance', '%');
const chartTotal3 = createLineChart(document.getElementById('chartTotal3').getContext('2d'), 'TOTAL3ES/ETH');

/* ============= state ============= */
let lastEthBtc = null;
let pollInterval = POLL_MS_DEFAULT;
let pollHandle = null;

/* ============= helpers ============= */
function tsNow() { return new Date(); }
function fmtNumber(n, digits=6) {
  if (n === null || n === undefined || isNaN(n)) return '—';
  if (Math.abs(n) >= 1000) return Intl.NumberFormat().format(Math.round(n));
  return Number(n).toLocaleString(undefined, { maximumFractionDigits: digits });
}
function pushPoint(chart, value) {
  const label = new Date().toLocaleTimeString();
  chart.data.labels.push(label);
  chart.data.datasets[0].data.push(value);
  if (chart.data.labels.length > MAX_POINTS) {
    chart.data.labels.shift();
    chart.data.datasets[0].data.shift();
  }
  chart.update('none');
}

/* ============= Binance WebSocket (ETHBTC -> invert) ============= */
let ws;
function connectBinanceWS(){
  try { if(ws) ws.close(); } catch(e){}
  ws = new WebSocket('wss://stream.binance.com:9443/ws/ethbtc@trade');
  ws.onopen = () => { wsStatusEl.textContent = 'WS: live'; wsStatusEl.previousElementSibling?.classList?.add('ok'); };
  ws.onclose = () => { wsStatusEl.textContent = 'WS: closed (reconnect)'; wsStatusEl.previousElementSibling?.classList?.remove('ok'); setTimeout(connectBinanceWS, 2000); };
  ws.onerror = (e) => { wsStatusEl.textContent = 'WS: error'; wsStatusEl.previousElementSibling?.classList?.remove('ok'); };
  ws.onmessage = (ev) => {
    try {
      const msg = JSON.parse(ev.data);
      const ethbtc = parseFloat(msg.p);
      if (!ethbtc || !isFinite(ethbtc)) return;
      lastEthBtc = ethbtc;
      const btcPerEth = 1 / ethbtc;
      btcEthValEl.textContent = fmtNumber(btcPerEth, 6);
      pushPoint(chartBtcEth, Number(btcPerEth.toFixed(8)));
    } catch(e){}
  };
}
connectBinanceWS();

/* ============= CoinGecko polling functions ============= */
async function fetchCoinGeckoGlobal(){
  const r = await fetch(`${COINGECKO_BASE}/global`);
  if (!r.ok) throw new Error('cg global failed');
  return r.json();
}
async function fetchCoinMarketsByIds(ids){
  if (!ids || ids.length === 0) return [];
  const q = `ids=${encodeURIComponent(ids.join(','))}&vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false`;
  const r = await fetch(`${COINGECKO_BASE}/coins/markets?${q}`);
  if (!r.ok) throw new Error('cg coins failed');
  return r.json();
}
async function fetchSimplePrice(ids, vs='usd'){
  const r = await fetch(`${COINGECKO_BASE}/simple/price?ids=${encodeURIComponent(ids)}&vs_currencies=${vs}`);
  if (!r.ok) throw new Error('cg simple price failed');
  return r.json();
}

/* compute TOTAL3ES */
async function pollAndCompute(){
  try {
    const g = await fetchCoinGeckoGlobal();
    const totalMarketCapUsd = g.data.total_market_cap.usd;
    const btcPct = g.data.market_cap_percentage.btc; // percent
    const ethPct = g.data.market_cap_percentage.eth; // percent
    const updatedAt = g.data.updated_at ? new Date(g.data.updated_at*1000) : new Date();
    lastUpdateEl.textContent = `last update: ${updatedAt.toLocaleTimeString()}`;

    // BTC & ETH caps
    const btcCap = (btcPct/100) * totalMarketCapUsd;
    const ethCap = (ethPct/100) * totalMarketCapUsd;

    // get stablecoins market cap sum (fetch by ids)
    const stableCoins = await fetchCoinMarketsByIds(STABLECOIN_IDS);
    const stableSum = stableCoins.reduce((s,c)=> s + (c.market_cap || 0), 0);

    // ETH price (usd)
    const priceResp = await fetchSimplePrice('ethereum','usd');
    const ethPriceUsd = priceResp.ethereum && priceResp.ethereum.usd ? priceResp.ethereum.usd : null;

    // TOTAL3ES USD = total - btc - eth - stablecoins
    const total3Usd = totalMarketCapUsd - btcCap - ethCap - stableSum;
    const total3PerEth = (ethPriceUsd && ethPriceUsd > 0) ? (total3Usd / ethPriceUsd) : null;

    // update UI
    btcDomValEl.textContent = fmtNumber(btcPct, 2) + " %";
    cgStatusEl.textContent = `CoinGecko ok @ ${new Date().toLocaleTimeString()}`;
    total3ValEl.textContent = total3PerEth ? fmtNumber(total3PerEth, 3) : '—';
    t3StatusEl.textContent = `updated @ ${new Date().toLocaleTimeString()}`;

    // push to charts
    if (typeof btcPct === 'number') pushPoint(chartBtcDom, Number(btcPct.toFixed(3)));
    if (total3PerEth && isFinite(total3PerEth)) pushPoint(chartTotal3, Number(total3PerEth.toFixed(4)));

    // 24h change for BTC/ETH — approximate: fetch ETHBTC 24h ticker
    try {
      const r = await fetch('https://api.binance.com/api/v3/ticker/24hr?symbol=ETHBTC');
      if (r.ok) {
        const d = await r.json();
        const changePct = parseFloat(d.priceChangePercent);
        if (!isNaN(changePct)) {
          btcEthChangeEl.textContent = `24h: ${changePct>0?'+':''}${changePct.toFixed(2)}%`;
          btcEthChangeEl.style.color = changePct>=0 ? 'var(--good)' : 'var(--bad)';
        }
      }
    } catch(e){ /* ignore */ }

    // mark update
    lastUpdateEl.textContent = `last update: ${new Date().toLocaleTimeString()}`;
  } catch (err) {
    cgStatusEl.textContent = 'CoinGecko: error';
    t3StatusEl.textContent = 'error';
    // don't throw — keep retrying
  } finally {
    clearTimeout(pollHandle);
    pollHandle = setTimeout(pollAndCompute, pollInterval);
  }
}
pollAndCompute();

/* ============= theme toggle & reset ============= */
themeBtn.addEventListener('click', () => {
  const el = document.body;
  const current = el.getAttribute('data-theme') || 'dark';
  el.setAttribute('data-theme', current === 'dark' ? 'light' : 'dark');
  // minor chart repaint to pick up css colours
  [chartBtcEth, chartBtcDom, chartTotal3].forEach(c => c.update());
});

resetBtn.addEventListener('click', () => {
  [chartBtcEth, chartBtcDom, chartTotal3].forEach(c => {
    c.data.labels = [];
    c.data.datasets[0].data = [];
    c.update();
  });
  btcEthValEl.textContent = '—';
  btcDomValEl.textContent = '—';
  total3ValEl.textContent = '—';
});

/* ============= cleanup on page hide (optional) ============= */
window.addEventListener('beforeunload', () => { try { if(ws) ws.close(); } catch(e){} });

</script>
</body>
</html>
